// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @unique @default(cuid())
  username         String
  email            String   @unique
  password         String
  isAdmin          Boolean  @default(false)
  mailVerification Boolean  @default(false)
  confirmProcess   String   @default("")
  createdAt        DateTime @default(now())
  googleId         String?  @unique
  facebookId       String?  @unique
  googleToken      String?  @db.VarChar(1000)
  discordToken     String?  @db.VarChar(1000)
  AREAs            AREA[]
}

model Service {
  id             String     @id @unique @default(cuid())
  name           String     @unique
  description    String?
  isEnable       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  primaryColor   String     @default("#000000") @db.VarChar(7)
  secondaryColor String     @default("#000000") @db.VarChar(7)
  icon           String?
  Actions        Action[]
  Reactions      Reaction[]
}

model Action {
  id                String             @id @unique @default(cuid())
  name              String
  code              String             @unique
  description       String?
  isEnable          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  Service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId         String
  DynamicParameters DynamicParameter[]
  Parameters        Parameter[]
  AREAsLink         AREAhasActions[]
}

model Reaction {
  id          String             @id @unique @default(cuid())
  name        String
  code        String             @unique
  description String?
  isEnable    Boolean            @default(false)
  createdAt   DateTime           @default(now())
  Service     Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId   String
  Parameters  Parameter[]
  AREAsLink   AREAhasReactions[]
}

model Parameter {
  id                 String              @id @unique @default(cuid())
  name               String
  description        String?
  isRequired         Boolean             @default(false)
  GetterUrl          String?
  Action             Action?             @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId           String?
  Reaction           Reaction?           @relation(fields: [reactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionId         String?
  ActionParameters   ActionParameter[]
  ReactionParameters ReactionParameter[]
}

model DynamicParameter {
  id          String  @id @unique @default(cuid())
  name        String
  description String?
  Action      Action  @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId    String
}

model ActionParameter {
  id               String         @id @unique @default(cuid())
  value            String         @db.VarChar(1000)
  Parameter        Parameter      @relation(fields: [parameterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parameterId      String
  AREAhasActions   AREAhasActions @relation(fields: [AREAhasActionsId], references: [id], onDelete: Cascade)
  AREAhasActionsId String
}

model ReactionParameter {
  id                 String           @id @unique @default(cuid())
  value              String           @db.VarChar(1000)
  Parameter          Parameter        @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId        String
  AREAhasReactions   AREAhasReactions @relation(fields: [AREAhasReactionsId], references: [id], onDelete: Cascade)
  AREAhasReactionsId String
}

model AREAhasReactions {
  id                 String              @id @unique @default(cuid())
  Reaction           Reaction            @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  reactionId         String
  AREA               AREA                @relation(fields: [AREAId], references: [id], onDelete: Cascade)
  AREAId             String
  ReactionParameters ReactionParameter[]
}

model AREAhasActions {
  id               String            @id @unique @default(cuid())
  Action           Action            @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId         String
  triggered        Boolean           @default(false)
  AREA             AREA              @relation(fields: [AREAId], references: [id], onDelete: Cascade)
  AREAId           String
  ActionParameters ActionParameter[]
}

model AREA {
  id          String             @id @unique @default(cuid())
  name        String
  isEnable    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  description String?
  logicalGate String             @default("OR")
  User        User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  Actions     AREAhasActions[]
  Reactions   AREAhasReactions[]
}
