// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                     @id @unique @default(cuid())
  username                 String                     @unique
  email                    String                     @unique
  password                 String
  isAdmin                  Boolean                    @default(false)
  mailVerification         Boolean                    @default(false)
  confirmProcess           String                     @default("")
  createdAt                DateTime                   @default(now())
  googleId                 String?                    @unique
  facebookId               String?                    @unique
  googleToken              String?                    @db.VarChar(1000)
  discordToken             String?                    @db.VarChar(1000)
  deezerToken              String?                    @db.VarChar(1000)
  UsersHasActionsReactions UsersHasActionsReactions[]
}

model Service {
  id             String     @id @unique @default(cuid())
  name           String     @unique
  description    String?
  isEnable       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  primaryColor   String     @default("#000000") @db.VarChar(7)
  secondaryColor String     @default("#000000") @db.VarChar(7)
  icon           String?
  Actions        Action[]
  Reactions      Reaction[]
}

model Action {
  id                       String                     @id @unique @default(cuid())
  name                     String
  code                     String                     @unique
  description              String?
  isEnable                 Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  Service                  Service?                   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId                String?
  Parameters               Parameter[]
  UsersHasActionsReactions UsersHasActionsReactions[]
}

model Reaction {
  id                       String                     @id @unique @default(cuid())
  name                     String
  code                     String                     @unique
  description              String?
  isEnable                 Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  Service                  Service?                   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId                String?
  Parameters               Parameter[]
  UsersHasActionsReactions UsersHasActionsReactions[]
}

model Parameter {
  id                 String              @id @unique @default(cuid())
  name               String
  description        String?
  isRequired         Boolean             @default(false)
  GetterUrl          String?
  Action             Action?             @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId           String?
  Reaction           Reaction?           @relation(fields: [reactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reactionId         String?
  ActionParameters   ActionParameter[]
  ReactionParameters ReactionParameter[]
}

model ActionParameter {
  id                         String                    @id @unique @default(cuid())
  value                      String
  Parameter                  Parameter?                @relation(fields: [parameterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parameterId                String?
  UsersHasActionsReactions   UsersHasActionsReactions? @relation(fields: [usersHasActionsReactionsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersHasActionsReactionsId String?
}

model ReactionParameter {
  id                         String                    @id @unique @default(cuid())
  value                      String
  Parameter                  Parameter?                @relation(fields: [parameterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parameterId                String?
  UsersHasActionsReactions   UsersHasActionsReactions? @relation(fields: [usersHasActionsReactionsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersHasActionsReactionsId String?
}

model UsersHasActionsReactions {
  id                 String              @id @unique @default(cuid())
  name               String
  User               User?               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Action             Action?             @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Reaction           Reaction?           @relation(fields: [reactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isEnable           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  description        String?
  userId             String?
  actionId           String?
  reactionId         String?
  ActionParameters   ActionParameter[]
  ReactionParameters ReactionParameter[]
}
